SQL> spool C:\Users\Asus\Desktop\moly study\xmPrac\pra.txt
SP2-0768: Illegal SPOOL command
Usage: SPOOL { <file> | OFF | OUT }
where <file> is file_name[.ext] [CRE[ATE]|REP[LACE]|APP[END]]
SQL> connect sys as sysdba;
Connected.
SQL> create user moni identified by moni;

User created.

SQL> grant dba to moni;

Grant succeeded.

SQL> connect;
Enter user-name: moni
Connected.
SQL> create table test(id number(2), name varchar2(10));

Table created.

SQL> savepoint s1
  2  ;

Savepoint created.

SQL> insert into test(id, name) values(1, 'west');

1 row created.

SQL> savepoint s2;

Savepoint created.

SQL> insert into test(id, name) values(2, 'rest');

1 row created.

SQL> rollback to s1;

Rollback complete.

SQL> show autocommit;
autocommit OFF
SQL> rollback;

Rollback complete.

SQL> autocommit on;
SP2-0734: unknown command beginning "autocommit..." - rest of line ignored.
SQL> set autocommit on;
SQL> show autocommit;
autocommit IMMEDIATE
SQL> create table departments(dep_id number(3) primary key, dep_name varchar2(12) not null);

Table created.

SQL> create table employees(emp_id number(3) primary key, emp_name varchar2(12) not null, mobile number(11) unique, salary number(7,2) check(salary> 10000), joining_date date default sysdate, country varchar2(12) default 'BD', dep_id number(3), constraint emp_dep_fk foreign key (dep_id) references departments(dep_id));

Table created.

SQL> describe depratments;
ERROR:
ORA-04043: object depratments does not exist 


SQL> describe departments;
 Name                                      Null?    Type
 ----------------------------------------- -------- ----------------------------
 DEP_ID                                    NOT NULL NUMBER(3)
 DEP_NAME                                  NOT NULL VARCHAR2(12)

SQL> describe employees;
 Name                                      Null?    Type
 ----------------------------------------- -------- ----------------------------
 EMP_ID                                    NOT NULL NUMBER(3)
 EMP_NAME                                  NOT NULL VARCHAR2(12)
 MOBILE                                             NUMBER(11)
 SALARY                                             NUMBER(7,2)
 JOINING_DATE                                       DATE
 COUNTRY                                            VARCHAR2(12)
 DEP_ID                                             NUMBER(3)

SQL> create table dep_backup as select * from departments;

Table created.

SQL> create table emp_backup as select * from employees;

Table created.

SQL> create or replace trigger dep_af_ins after insert on departments for each row
  2  declare
  3  begin
  4  insert into dep_backup(dep_id, dep_name) values(:new.dep_id, :new.dep_name);
  5  dbms_output.put_line('Trigger successful');
  6  end;
  7  /

Trigger created.

SQL> create or replace trigger emp_af_ins after insert on employees for each row
  2  declare
  3  begin
  4  insert into dep_backup(emp_id, emp_name, mobile, salary, joining_date, country, dep_id) values(:new.emp_id, :new.emp_name, :new.mobile, :new.salary,  :new.joining_date, :new.country, :new.dep_id );
  5  dbms_output.put_line('Trigger successful');
  6  end;
  7  /

Warning: Trigger created with compilation errors.

SQL> create or replace trigger emp_af_ins after insert on employees for each row
  2  declare
  3  begin
  4  insert into emp_backup(emp_id, emp_name, mobile, salary, joining_date, country, dep_id) values(:new.emp_id, :new.emp_name, :new.mobile, :new.salary,  :new.joining_date, :new.country, :new.dep_id );
  5  dbms_output.put_line('Trigger successful');
  6  end;
  7  /

Trigger created.

SQL> create or replace trigger dep_af_up after update on departments for each row
  2  declare
  3  begin
  4  update dep_backup set(dep_name=:new.dep_name) where dep_id=:old.dep_id;
  5  dbms_output.put_line('Trigger successful');
  6  end;
  7  /

Warning: Trigger created with compilation errors.

SQL> create or replace trigger dep_af_up after update on departments for each row
  2  declare
  3  begin
  4  update dep_backup set dep_name=:new.dep_name where dep_id=:old.dep_id;
  5  dbms_output.put_line('Trigger successful');
  6  end;
  7  /

Trigger created.

SQL> create or replace trigger emp_af_up after update on employees for each row
  2  declare
  3  begin
  4  update emp_backup set  emp_name=:new.emp_name, mobile=:new.mobile, salary=:new.salary, joining_date=:new.joining_date, country=:new.country, dep_id=:new.dep_id where emp_id=:old.emp_id;
  5  dbms_output.put_line('Trigger successful');
  6  end;
  7  /

Trigger created.

SQL> create or replace trigger dep_af_del after delete on departments for each row
  2  declare
  3  begin
  4  delete dep_backup where dep_id=:old.dep_id;
  5  dbms_output.put_line('Trigger successful');
  6  end;
  7  /

Trigger created.

SQL> create or replace trigger emp_af_del after update on employees for each row
  2  declare
  3  begin
  4  delete emp_backup  where emp_id=:old.emp_id;
  5  dbms_output.put_line('Trigger successful');
  6  end;
  7  /

Trigger created.

SQL> create sequence dep_seq
  2  increment by 10
  3  start with 10
  4  nomaxvalue
  5  nocycle
  6  nocache;

Sequence created.

SQL> create sequence emp_seq
  2  increment by 5
  3  start with 1
  4  nomaxvalue
  5  nocycle
  6  nocache;

Sequence created.

SQL> select sequence_name from user_sequences;

SEQUENCE_NAME                                                                   
------------------------------                                                  
DEP_SEQ                                                                         
EMP_SEQ                                                                         

SQL> select index_name from user_indexes;

INDEX_NAME                                                                      
------------------------------                                                  
SYS_C007487                                                                     
SYS_C007490                                                                     
SYS_C007491                                                                     

SQL> create index dep_inx on department(dep_name);
create index dep_inx on department(dep_name)
                        *
ERROR at line 1:
ORA-00942: table or view does not exist 


SQL> create index dep_inx on departments(dep_name);

Index created.

SQL> select index_name from user_indexes;

INDEX_NAME                                                                      
------------------------------                                                  
SYS_C007487                                                                     
SYS_C007490                                                                     
SYS_C007491                                                                     
DEP_INX                                                                         

SQL> create or replace procedure dep_ins_pro(
  2  d_dep_id in departments.dep_id%type,
  3  d_dep_name in departments.dep_name%type)
  4  is
  5  begin
  6  insert into departments(dep_id, dep_name) values(d_dep_id, d_dep_name);
  7  end;
  8  /

Procedure created.

SQL> create or replace procedure dep_up_pro(
  2  d_dep_id in departments.dep_id%type,
  3  d_dep_name in departments.dep_name%type)
  4  is
  5  begin
  6  update departments set dep_name=d_dep_name where dep_id=d_dep_id;
  7  end;
  8  /

Procedure created.

SQL> create or replace procedure dep_del_pro(
  2  d_dep_id in departments.dep_id%type,
  3  d_dep_name in departments.dep_name%type)
  4  is
  5  begin
  6  delete departments  where dep_id=d_dep_id;
  7  end;
  8  /

Procedure created.

SQL> begin
  2  dep_ins_pro(dep_seq.nextval, 'Admin');
  3  end;
  4  /

PL/SQL procedure successfully completed.

Commit complete.
SQL> dep_ins_pro(dep_seq.nextval, 'Software');
SP2-0734: unknown command beginning "dep_ins_pr..." - rest of line ignored.
SQL> begin
  2  dep_ins_pro(dep_seq.nextval, 'Software');
  3  end;
  4  /

PL/SQL procedure successfully completed.

Commit complete.
SQL> begin
  2  dep_ins_pro(dep_seq.nextval, 'Marketing');
  3  end;
  4  /

PL/SQL procedure successfully completed.

Commit complete.
SQL> insert into departments(dep_id, dep_name) values(dep_seq.nextval, 'Enginear')
  2  ;

1 row created.

Commit complete.
SQL> insert into departments(dep_id, dep_name) values(dep_seq.nextval, 'Programmar');

1 row created.

Commit complete.
SQL> select * from dep_backup;

    DEP_ID DEP_NAME                                                             
---------- ------------                                                         
        10 Admin                                                                
        20 Software                                                             
        30 Marketing                                                            
        40 Enginear                                                             
        50 Programmar                                                           

SQL> create view dep_vw as select * from departments;

View created.

SQL> select view_name from user_views;

VIEW_NAME                                                                       
------------------------------                                                  
DEP_VW                                                                          

SQL> create synonym dep_syn for departments;

Synonym created.

SQL> create synonym dep_vw_syn for dep_vw;

Synonym created.

SQL> select synonym_name from user_synonyms;

SYNONYM_NAME                                                                    
------------------------------                                                  
DEP_SYN                                                                         
DEP_VW_SYN                                                                      

SQL> select * from dep_syn;

    DEP_ID DEP_NAME                                                             
---------- ------------                                                         
        10 Admin                                                                
        20 Software                                                             
        30 Marketing                                                            
        40 Enginear                                                             
        50 Programmar                                                           

SQL> select * from dep_vw_syn;

    DEP_ID DEP_NAME                                                             
---------- ------------                                                         
        10 Admin                                                                
        20 Software                                                             
        30 Marketing                                                            
        40 Enginear                                                             
        50 Programmar                                                           

SQL> select index_name from user_indexes;

INDEX_NAME                                                                      
------------------------------                                                  
SYS_C007487                                                                     
SYS_C007490                                                                     
SYS_C007491                                                                     
DEP_INX                                                                         

SQL> create index emp_inx on employees(emp_name);

Index created.

SQL> select index_name from user_indexes;

INDEX_NAME                                                                      
------------------------------                                                  
SYS_C007487                                                                     
SYS_C007490                                                                     
SYS_C007491                                                                     
DEP_INX                                                                         
EMP_INX                                                                         

SQL> select sequence_name from user_sequences;

SEQUENCE_NAME                                                                   
------------------------------                                                  
DEP_SEQ                                                                         
EMP_SEQ                                                                         

SQL> create or replace procedure emp_ins_pro(
  2  e_emp_id in employees.emp_id%type,
  3  e_emp_name in employees.emp_name%type,
  4  e_mobile in employees.mobile%type,
  5  e_salary in employees.salary%type,
  6  e_joining_date in employees.joining_date%type,
  7  e_country in employees.country%type,
  8  e_dep_id in employees.dep_id%type)
  9  is
 10  begin
 11  insert into employees(emp_id, emp_name, mobile, salary, joining_date, country, dep_id) values(e_emp_id, e_emp_name, e_mobile, e_salary, e_joining_date, e_country, e_dep_id);
 12  end;
 13  /

Procedure created.

SQL> create or replace procedure emp_up_pro(
  2  e_emp_id in employees.emp_id%type,
  3  e_emp_name in employees.emp_name%type,
  4  e_mobile in employees.mobile%type,
  5  e_salary in employees.salary%type,
  6  e_joining_date in employees.joining_date%type,
  7  e_country in employees.country%type,
  8  e_dep_id in employees.dep_id%type)
  9  is
 10  begin
 11  update employees set  emp_name=e_emp_name, mobile=e_mobile, salary=e_salary, joining_date=e_joining_date, country=e_country, dep_id=e_dep_id where emp_id=e_emp_id;
 12  end;
 13  /

Procedure created.

SQL> create or replace procedure emp_up_pro(
  2  e_emp_id in employees.emp_id%type,
  3  e_emp_name in employees.emp_name%type,
  4  e_mobile in employees.mobile%type,
  5  e_salary in employees.salary%type,
  6  e_joining_date in employees.joining_date%type,
  7  e_country in employees.country%type,
  8  e_dep_id in employees.dep_id%type)
  9  is
 10  begin
 11  delete where emp_id=e_emp_id;
 12  end;
 13  
 14  
 15  /

Warning: Procedure created with compilation errors.

SQL> create or replace procedure emp_del_pro(
  2  e_emp_id in employees.emp_id%type,
  3  e_emp_name in employees.emp_name%type,
  4  e_mobile in employees.mobile%type,
  5  e_salary in employees.salary%type,
  6  e_joining_date in employees.joining_date%type,
  7  e_country in employees.country%type,
  8  e_dep_id in employees.dep_id%type)
  9  is
 10  begin
 11  delete where emp_id=e_emp_id;
 12  end;
 13  
 14  
 15  /

Warning: Procedure created with compilation errors.

SQL> create or replace procedure emp_del_pro(
  2  e_emp_id in employees.emp_id%type)
  3  is
  4  begin
  5  delete where emp_id=e_emp_id;
  6  end;
  7  
  8  
  9  /

Warning: Procedure created with compilation errors.

SQL> create or replace procedure emp_del_pro(
  2  e_emp_id in employees.emp_id%type)
  3  is
  4  begin
  5  delete where emp_id=e_emp_id;
  6  end;
  7  
  8  /

Warning: Procedure created with compilation errors.

SQL> create or replace procedure emp_del_pro(
  2  e_emp_id in employees.emp_id%type)
  3  is
  4  begin
  5  delete empolyees where emp_id=e_emp_id;
  6  end;
  7  
  8  
  9  /

Warning: Procedure created with compilation errors.

SQL> create or replace procedure emp_delt_pro(
  2  e_emp_id in employees.emp_id%type)
  3  is
  4  begin
  5  delete empolyees where emp_id=e_emp_id;
  6  end;
  7  /

Warning: Procedure created with compilation errors.

SQL> create or replace procedure emp_del_pro(
  2  e_emp_id in employees.emp_id%type)
  3  is
  4  begin
  5  delete employees where emp_id=e_emp_id;
  6  end;
  7  
  8  /

Procedure created.

SQL> begin
  2  emp_ins_pro(emp_seq.nextval, 'moly', 034343343, 12000, '12-jan-2012', 'USA', 30);
  3  end;
  4  /

PL/SQL procedure successfully completed.

Commit complete.
SQL> begin
  2  emp_ins_pro(emp_seq.nextval, 'poly', 365456657, 15000, '12-jan-2010', 'Rassia', 20);
  3  end;
  4  /

PL/SQL procedure successfully completed.

Commit complete.
SQL> begin
  2  emp_ins_pro(emp_seq.nextval, 'popy', 32636237, 13000, '12-jan-2008', 'India', 10);
  3  end;
  4  /

PL/SQL procedure successfully completed.

Commit complete.
SQL> insert into employees(emp_id, emp_name, mobile,salary, dep_id) values(em_seq.nextval, 'holy', 363463674, 20000, 50);
insert into employees(emp_id, emp_name, mobile,salary, dep_id) values(em_seq.nextval, 'holy', 363463674, 20000, 50)
                                                                      *
ERROR at line 1:
ORA-02289: sequence does not exist 


SQL> insert into employees(emp_id, emp_name, mobile,salary, dep_id) values(emp_seq.nextval, 'holy', 363463674, 20000, 50);

1 row created.

Commit complete.
SQL> insert into employees(emp_id, emp_name, mobile,salary, dep_id) values(emp_seq.nextval, 'joly', 344744774, 20000, 40);

1 row created.

Commit complete.
SQL> insert into employees(emp_id, emp_name, mobile,salary, dep_id) values(emp_seq.nextval, 'doly', 344744774, 20000, 10);
insert into employees(emp_id, emp_name, mobile,salary, dep_id) values(emp_seq.nextval, 'doly', 344744774, 20000, 10)
*
ERROR at line 1:
ORA-00001: unique constraint (MONI.SYS_C007491) violated 


SQL> insert into employees(emp_id, emp_name, mobile,salary, dep_id) values(emp_seq.nextval, 'doly',44744774, 20000, 10);

1 row created.

Commit complete.
SQL> insert into employees(emp_id, emp_name, mobile,salary, dep_id) values(emp_seq.nextval, 'loly',56744774, 20000, 20);

1 row created.

Commit complete.
SQL> select * from emp_backup;

    EMP_ID EMP_NAME         MOBILE     SALARY JOINING_D COUNTRY          DEP_ID 
---------- ------------ ---------- ---------- --------- ------------ ---------- 
         1 moly           34343343      12000 12-JAN-12 USA                  30 
         6 poly          365456657      15000 12-JAN-10 Rassia               20 
        11 popy           32636237      13000 12-JAN-08 India                10 
        16 holy          363463674      20000 10-SEP-18 BD                   50 
        21 joly          344744774      20000 10-SEP-18 BD                   40 
        31 doly           44744774      20000 10-SEP-18 BD                   10 
        36 loly           56744774      20000 10-SEP-18 BD                   20 

7 rows selected.

SQL> create view emp_vw as select * from employees;

View created.

SQL> select view_name from user_views;

VIEW_NAME                                                                       
------------------------------                                                  
DEP_VW                                                                          
EMP_VW                                                                          

SQL> create synonym emp_syn for employees;

Synonym created.

SQL> create synonym emp_vw_syn for emp_vw;

Synonym created.

SQL> select * from emp_syn;

    EMP_ID EMP_NAME         MOBILE     SALARY JOINING_D COUNTRY          DEP_ID 
---------- ------------ ---------- ---------- --------- ------------ ---------- 
         1 moly           34343343      12000 12-JAN-12 USA                  30 
         6 poly          365456657      15000 12-JAN-10 Rassia               20 
        11 popy           32636237      13000 12-JAN-08 India                10 
        16 holy          363463674      20000 10-SEP-18 BD                   50 
        21 joly          344744774      20000 10-SEP-18 BD                   40 
        31 doly           44744774      20000 10-SEP-18 BD                   10 
        36 loly           56744774      20000 10-SEP-18 BD                   20 

7 rows selected.

SQL> select * from emp_vw_syn;

    EMP_ID EMP_NAME         MOBILE     SALARY JOINING_D COUNTRY          DEP_ID 
---------- ------------ ---------- ---------- --------- ------------ ---------- 
         1 moly           34343343      12000 12-JAN-12 USA                  30 
         6 poly          365456657      15000 12-JAN-10 Rassia               20 
        11 popy           32636237      13000 12-JAN-08 India                10 
        16 holy          363463674      20000 10-SEP-18 BD                   50 
        21 joly          344744774      20000 10-SEP-18 BD                   40 
        31 doly           44744774      20000 10-SEP-18 BD                   10 
        36 loly           56744774      20000 10-SEP-18 BD                   20 

7 rows selected.

SQL> begin
  2  dep_up_pro(30, 'Sales');
  3  end;
  4  /

PL/SQL procedure successfully completed.

Commit complete.
SQL> select * from dep_backup;

    DEP_ID DEP_NAME                                                             
---------- ------------                                                         
        10 Admin                                                                
        20 Software                                                             
        30 Sales                                                                
        40 Enginear                                                             
        50 Programmar                                                           

SQL> alter table employees add email varchar2(12);

Table altered.

SQL> begin
  2  emp_up_pro(1, 50);
  3  end;
  4  /
emp_up_pro(1, 50);
*
ERROR at line 2:
ORA-06550: line 2, column 1: 
PLS-00905: object MONI.EMP_UP_PRO is invalid 
ORA-06550: line 2, column 1: 
PL/SQL: Statement ignored 


SQL> begin
  2  emp_up_pro(1,'','','','','','', 50);
  3  end;
  4  /
emp_up_pro(1,'','','','','','', 50);
*
ERROR at line 2:
ORA-06550: line 2, column 1: 
PLS-00905: object MONI.EMP_UP_PRO is invalid 
ORA-06550: line 2, column 1: 
PL/SQL: Statement ignored 


SQL> begin
  2  emp_up_pro(1,'','','','','','', '50');
  3  end;
  4  /
emp_up_pro(1,'','','','','','', '50');
*
ERROR at line 2:
ORA-06550: line 2, column 1: 
PLS-00905: object MONI.EMP_UP_PRO is invalid 
ORA-06550: line 2, column 1: 
PL/SQL: Statement ignored 


SQL> create or replace procedure emp_upd_pro(
  2  e_emp_id in employees.emp_id%type,
  3  e_emp_name in employees.emp_name%type,
  4  e_mobile in employees.mobile%type,
  5  e_salary in employees.salary%type,
  6  e_joining_date in employees.joining_date%type,
  7  e_country in employees.country%type,
  8  e_dep_id in employees.dep_id%type)
  9  is
 10  begin
 11  update employees set  emp_name=e_emp_name, mobile=e_mobile, salary=e_salary, joining_date=e_joining_date, country=e_country, dep_id=e_dep_id where emp_id=e_emp_id;
 12  end;
 13  
 14  /

Procedure created.

SQL> begin
  2  emp_upd_pro(1,50);
  3  end;
  4  /
emp_upd_pro(1,50);
*
ERROR at line 2:
ORA-06550: line 2, column 1: 
PLS-00306: wrong number or types of arguments in call to 'EMP_UPD_PRO' 
ORA-06550: line 2, column 1: 
PL/SQL: Statement ignored 


SQL> spool off
